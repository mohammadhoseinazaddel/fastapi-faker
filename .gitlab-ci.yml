# GitLab CI/CD configuration file
# Check https://docs.gitlab.com/ee/ci/yaml/ for more details
# Variables are defined in GitLab UI
# This file is used for development, staging and production environments
# every commit to develop branch will trigger a development deployment
# every tag starting with "staging" will trigger a staging deployment
# every tag starting with "prd" will trigger a production deployment
# builded image will be tagged with the commit short sha

.development: &development
  rules:
  - if: $CI_COMMIT_REF_NAME == "develop"
  variables:
    ENVIRONMENT: development
    ENVIRONMENT_VALUES_FILE: ./apps/wallpay/dev.values.yaml
  environment: development

.staging: &staging
  rules:
  - if: $CI_COMMIT_TAG =~ /^staging.*$/
  variables:
    ENVIRONMENT: staging
    ENVIRONMENT_VALUES_FILE: ./apps/wallpay/staging.values.yaml
  environment: staging

.production: &production
  rules:
  - if: $CI_COMMIT_TAG =~ /^prd.*$/
  variables:
    ENVIRONMENT: production
    ENVIRONMENT_VALUES_FILE: ./apps/wallpay/production.values.yaml
  environment: production

.imageVariables: &imageVariables
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_NAME_API: $CI_REGISTRY_IMAGE/$APP_NAME_API-$ENVIRONMENT:$CI_COMMIT_SHORT_SHA
    IMAGE_NAME_BEAT: $CI_REGISTRY_IMAGE/$APP_NAME_BEAT-$ENVIRONMENT:$CI_COMMIT_SHORT_SHA
    IMAGE_NAME_WORKER: $CI_REGISTRY_IMAGE/$APP_NAME_WORKER-$ENVIRONMENT:$CI_COMMIT_SHORT_SHA

stages:
- build
- deploy

default:
  interruptible: true
  retry: 2

# Base building images job for all environments. Each environment should inherit from this job
# and override the image name
.build:
  stage: build
  image: docker:stable
  services:
  - docker:dind
  <<: *imageVariables
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
  - docker build --pull --cache-from $IMAGE_NAME_API -t $IMAGE_NAME_API -f ./api.dockerfile .
  - docker build --pull --cache-from $IMAGE_NAME_BEAT -t $IMAGE_NAME_BEAT -f ./celerybeat.dockerfile .
  - docker build --pull --cache-from $IMAGE_NAME_WORKER -t $IMAGE_NAME_WORKER -f ./celeryworker.dockerfile .
  - docker push $IMAGE_NAME_API
  - docker push $IMAGE_NAME_BEAT
  - docker push $IMAGE_NAME_WORKER

# Development environment
.development:build:
  extends:
  - .development
  - .build

development:build:api:
  variables:
    APP_NAME_API: api
    APP_NAME_BEAT: celerybeat
    APP_NAME_WORKER: celeryworker
  extends: .development:build

development:build:celeryworker:
  variables:
    APP_NAME: celeryworker
  extends: .development:build

development:build:celerybeat:
  <<: *development
  variables:
    APP_NAME: celerybeat
  extends: .development:build

# Staging environment
.staging:build:
  extends:
  - .staging
  - .build

staging:build:api:
  variables:
    APP_NAME_API: api
    APP_NAME_BEAT: celerybeat
    APP_NAME_WORKER: celeryworker
  extends: .staging:build

staging:build:celeryworker:
  variables:
    APP_NAME: celeryworker
  extends: .staging:build

staging:build:celerybeat:
  variables:
    APP_NAME: celerybeat
  extends: .staging:build

# Production environment
.production:build:
  extends:
  - .production
  - .build

production:build:api:
  variables:
    APP_NAME_API: api
    APP_NAME_BEAT: celerybeat
    APP_NAME_WORKER: celeryworker
  extends: .production:build

production:build:celeryworker:
  variables:
    APP_NAME: celeryworker
  extends: .production:build

production:build:celerybeat:
  variables:
    APP_NAME: celerybeat
  extends: .production:build

# Base deployment job for all environments. Each environment should inherit from this job
# and override the image name
.deploy:
  stage: deploy
  image: alpine
  <<: *imageVariables
  before_script:
  - apk add git
  # config git user email and name
  - git config --global user.email "$HELM_GIT_USER_EMAIL"
  - git config --global user.name "$HELM_GIT_USER_NAME"
  script:
  # clone helm repo. https://secret-token@github.com/username/repo.git
  - git clone https://$HELM_GIT_TOKEN@$HELM_GIT_REPO --branch $HELM_GIT_BRANCH --single-branch k8s-wallpay
  # update helm chart version
  - cd k8s-wallpay
  - ls -la
  - tag=$(cat $ENVIRONMENT_VALUES_FILE | grep $APP_NAME_API\_image | awk -F":" '{print $3}')
  - echo $tag
  #- tag_beat=$(cat $ENVIRONMENT_VALUES_FILE | grep $APP_NAME_BEAT\_image | awk -F":" '{print $3}')
  #- tag_worker=$(cat $ENVIRONMENT_VALUES_FILE | grep $APP_NAME_WORKER\_image | awk -F":" '{print $3}')
  - sed -i "s/$tag/$CI_COMMIT_SHORT_SHA/g" $ENVIRONMENT_VALUES_FILE
  - git add $ENVIRONMENT_VALUES_FILE
  - git commit -m "Update $CI_PROJECT_NAME to $ENVIRONMENT.$CI_COMMIT_SHORT_SHA"
  - git push

# Development environment
.development:deploy:
  extends:
  - .development
  - .deploy

development:deploy:api:
  variables:
    APP_NAME_API: api
    APP_NAME_BEAT: celerybeat
    APP_NAME_WORKER: celeryworker
  extends: .development:deploy
  needs:
  - development:build:api

development:deploy:celeryworker:
  variables:
    APP_NAME: celeryworker
  extends: .development:deploy
  needs:
  - development:build:celeryworker


development:deploy:celerybeat:
  variables:
    APP_NAME: celerybeat
  extends: .development:deploy
  needs:
  - development:build:celerybeat

# Staging environment
.staging:deploy:
  extends:
  - .staging
  - .deploy

staging:deploy:api:
  variables:
    APP_NAME_API: api
    APP_NAME_BEAT: celerybeat
    APP_NAME_WORKER: celeryworker
  extends: .staging:deploy
  needs:
  - staging:build:api

staging:deploy:celeryworker:
  variables:
    APP_NAME: celeryworker
  extends: .staging:deploy
  needs:
  - staging:build:celeryworker

staging:deploy:celerybeat:
  variables:
    APP_NAME: celerybeat
  extends: .staging:deploy
  needs:
  - staging:build:celerybeat

# Production environment
.production:deploy:
  extends:
  - .production
  - .deploy

production:deploy:api:
  variables:
    APP_NAME_API: api
    APP_NAME_BEAT: celerybeat
    APP_NAME_WORKER: celeryworker
  extends: .production:deploy
  needs:
  - production:build:api

production:deploy:celeryworker:
  variables:
    APP_NAME: celeryworker
  extends: .production:deploy
  needs:
  - production:build:celeryworker

production:deploy:celerybeat:
  variables:
    APP_NAME: celerybeat
  extends: .production:deploy
  needs:
  - production:build:celerybeat
